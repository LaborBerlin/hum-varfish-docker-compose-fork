version: "3.8"

services:
  traefik:
    image: traefik:v2.3.1
    ports:
      - "80:80"
      - "443:443"
    networks:
      - varfish
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"
    volumes:
      - "./volumes/traefik/letsencrypt:/letsencrypt:rw"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./config/traefik:/etc/traefik:ro"
      - "--providers.file.watch=true"

  varfish-web:
    image: bihealth/varfish-server:${VARFISH_VERSION}
    env_file:
      - .env
    networks:
      - varfish
    restart: unless-stopped
    volumes:
      - "/root/varfish-server-background-db-20201006:/data:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.xforward.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.varfish-web.entrypoints=web,websecure"
      - "traefik.http.routers.varfish-web.middlewares=xforward"
      - "traefik.http.routers.varfish-web.rule=HostRegexp(`{catchall:.+}`)"
      - "traefik.http.services.varfish-web.loadbalancer.server.port=8080"
      - "traefik.http.routers.varfish-web.tls=true"

  varfish-celerybeat:
    image: bihealth/varfish-server:${VARFISH_VERSION}
    env_file:
      - .env
    command: ["celerybeat"]
    networks:
      - varfish
    depends_on:
      - varfish-web
    restart: unless-stopped

  varfish-celeryd-default:
    image: bihealth/varfish-server:${VARFISH_VERSION}
    env_file:
      - .env
    command: ["celeryd"]
    environment:
      - CELERY_QUEUES=default
      - CELERY_WORKERS=16
    depends_on:
      - varfish-web
    networks:
      - varfish
    restart: unless-stopped

  varfish-celeryd-query:
    image: bihealth/varfish-server:${VARFISH_VERSION}
    env_file:
      - .env
    command: ["celeryd"]
    environment:
      - CELERY_QUEUES=query
      - CELERY_WORKERS=16
    depends_on:
      - varfish-web
    networks:
      - varfish
    restart: unless-stopped

  varfish-celeryd-export:
    image: bihealth/varfish-server:${VARFISH_VERSION}
    env_file:
      - .env
    command: ["celeryd"]
    environment:
      - CELERY_QUEUES=export
      - CELERY_WORKERS=8
    depends_on:
      - varfish-web
    networks:
      - varfish
    restart: unless-stopped

  varfish-celeryd-import:
    image: bihealth/varfish-server:${VARFISH_VERSION}
    env_file:
      - .env
    command: ["celeryd"]
    environment:
      - CELERY_QUEUES=import
      - CELERY_WORKERS=4
    depends_on:
      - varfish-web
    networks:
      - varfish
    restart: unless-stopped

  varfish-celeryd-maintenance:
    image: bihealth/varfish-server:${VARFISH_VERSION}
    env_file:
      - .env
    command: ["celeryd"]
    environment:
      - CELERY_QUEUES=maintenance
      - CELERY_WORKERS=8
    depends_on:
      - varfish-web
    networks:
      - varfish
    restart: unless-stopped

  jannovar:
    image: quay.io/biocontainers/jannovar-cli:${JANNOVAR_VERSION}
    command: [
        "jannovar", "-Xmx6G", "-Xms2G",
        "rest-server", "--host", "0.0.0.0", "--port", "80",
        "-d", "/data/hg19_ensembl.ser",
        "-d", "/data/hg19_refseq.ser",
        "-d", "/data/hg19_refseq_curated.ser",
    ]
    volumes:
      - type: bind
        source: ./volumes/jannovar
        target: /data
        read_only: true
    networks:
      - varfish
    restart: unless-stopped

  exomiser-rest-prioritiser:
    image: quay.io/biocontainers/exomiser-rest-prioritiser:${EXOMISER_VERSION}
    command: [
        "exomiser-rest-prioritiser", "-Xmx6G", "-Xms2G", "-Dserver.address=0.0.0.0",
        "-Dserver.port=80",
    ]
    volumes:
      - type: bind
        source: ./config/exomiser/application.properties
        target: /application.properties
        read_only: true
      - type: bind
        source: ./volumes/exomiser
        target: /data
        read_only: true
    networks:
      - varfish
    restart: unless-stopped

  minio:  # minio does not like being tagged
    image: minio/minio
    env_file:
      - .env
    command: ["server", "/data"]
    volumes:
      - type: bind
        source: ./volumes/minio
        target: /data
    networks:
      - varfish
    restart: unless-stopped

  postgres:
    image: postgres:12
    env_file:
      - .env
    networks:
      - varfish
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./volumes/postgres/data
        target: /var/lib/postgresql/data

  redis:
    image: redis:6
    networks:
      - varfish
    restart: unless-stopped
    volumes:
      - "./volumes/redis/data:/data:rw"

  # Uncomment the following lines to enable the CADD REST API server that
  # is used for variant prioritization using the CADD score.  We need both
  # the server and the CADD-based worker.
  #
  # You will need "cadd-rest-api-server" and "cadd-rest-api-celeryd-worker-*".
  cadd-rest-api-server:
    image: bihealth/cadd-rest-api:${CADD_REST_API_VERSION}
    env_file: cadd-rest-api.env
    command: ["wsgi"]
    networks:
      - varfish
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./volumes/cadd-rest-api/db
        target: /data/db
        read_only: false

  # You have to provide multiple cadd-rest-api-celeryd-worker container if
  # you want to handle more than one query at a time.
  cadd-rest-api-celeryd-worker-1:
    image: bihealth/cadd-rest-api:${CADD_REST_API_VERSION}
    env_file: cadd-rest-api.env
    command: ["celeryd"]
    networks: [varfish]
    restart: unless-stopped
    volumes:
      - "./volumes/cadd-rest-api/data/annotations:/opt/miniconda3/share/cadd-scripts-1.6-0/data/annotations:ro"
      - "./volumes/cadd-rest-api/data/prescored:/opt/miniconda3/share/cadd-scripts-1.6-0/data/prescored:ro"
      - "./volumes/cadd-rest-api/db:/data/db:rw"
  cadd-rest-api-celeryd-worker-2:
    image: bihealth/cadd-rest-api:${CADD_REST_API_VERSION}
    env_file: cadd-rest-api.env
    command: ["celeryd"]
    networks: [varfish]
    restart: unless-stopped
    volumes:
      - "./volumes/cadd-rest-api/data/annotations:/opt/miniconda3/share/cadd-scripts-1.6-0/data/annotations:ro"
      - "./volumes/cadd-rest-api/data/prescored:/opt/miniconda3/share/cadd-scripts-1.6-0/data/prescored:ro"
      - "./volumes/cadd-rest-api/db:/data/db:rw"
  cadd-rest-api-celeryd-worker-3:
    image: bihealth/cadd-rest-api:${CADD_REST_API_VERSION}
    env_file: cadd-rest-api.env
    command: ["celeryd"]
    networks: [varfish]
    restart: unless-stopped
    volumes:
      - "./volumes/cadd-rest-api/data/annotations:/opt/miniconda3/share/cadd-scripts-1.6-0/data/annotations:ro"
      - "./volumes/cadd-rest-api/data/prescored:/opt/miniconda3/share/cadd-scripts-1.6-0/data/prescored:ro"
      - "./volumes/cadd-rest-api/db:/data/db:rw"
  cadd-rest-api-celeryd-worker-4:
    image: bihealth/cadd-rest-api:${CADD_REST_API_VERSION}
    env_file: cadd-rest-api.env
    command: ["celeryd"]
    networks: [varfish]
    restart: unless-stopped
    volumes:
      - "./volumes/cadd-rest-api/data/annotations:/opt/miniconda3/share/cadd-scripts-1.6-0/data/annotations:ro"
      - "./volumes/cadd-rest-api/data/prescored:/opt/miniconda3/share/cadd-scripts-1.6-0/data/prescored:ro"
      - "./volumes/cadd-rest-api/db:/data/db:rw"

networks:
  varfish:
